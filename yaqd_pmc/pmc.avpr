{
    "config": {
        "accel_gain": {
            "default": 0,
            "doc": "Acceleration Gain",
            "type": "float"
        },
        "acceleration": {
            "default": 70000,
            "doc": "Acceleration for the motor in steps/sec/sec",
            "type": "float"
        },
        "axis": {
            "default": 0,
            "doc": "Axis number for the individual motor in the controller",
            "type": "int"
        },
        "controller": {
            "default": 0,
            "doc": "Index of the controller in MCAPI",
            "type": "int"
        },
        "counts_per_mm": {
            "default": 58200,
            "doc": "Encoder counts per mm of travel",
            "type": "int"
        },
        "decel_gain": {
            "default": 0,
            "doc": "Deceleration Gain",
            "type": "float"
        },
        "delay_at_target": {
            "default": 0,
            "doc": "Delay At Target",
            "type": "float"
        },
        "derivative_gain": {
            "default": 6000,
            "doc": "Derivative Gain",
            "type": "float"
        },
        "derivative_sample": {
            "default": 0.001364,
            "doc": "Derivative Sample",
            "type": "float"
        },
        "encoder_scaling": {
            "default": 0,
            "doc": "Encoder Scaling",
            "type": "float"
        },
        "following_error": {
            "default": 0,
            "doc": "Following Error",
            "type": "float"
        },
        "gain": {
            "default": 2211,
            "doc": "Gain parameter",
            "type": "float"
        },
        "integral_gain": {
            "default": 0,
            "doc": "Integral Gain",
            "type": "float"
        },
        "integration_limit": {
            "default": 0,
            "doc": "Integration Limit",
            "type": "int"
        },
        "integration_option": {
            "default": 0,
            "doc": "Integration Option",
            "type": "int"
        },
        "limits": {
            "default": [
                -Infinity,
                Infinity
            ],
            "doc": "Configuration limits are strictly optional.",
            "items": "float",
            "type": "array"
        },
        "make": {
            "default": null,
            "type": [
                "null",
                "string"
            ]
        },
        "model": {
            "default": null,
            "type": [
                "null",
                "string"
            ]
        },
        "out_of_limits": {
            "default": "closest",
            "doc": "Control behavior of daemon when set_position is given a value outside of limits.",
            "name": "out_of_limits",
            "symbols": [
                "closest",
                "ignore",
                "error"
            ],
            "type": "enum"
        },
        "output_deadband": {
            "default": 0,
            "doc": "Output Deadband",
            "type": "float"
        },
        "output_offset": {
            "default": 0,
            "doc": "Output Offset",
            "type": "float"
        },
        "port": {
            "doc": "TCP port for daemon to occupy.",
            "type": "int"
        },
        "position_deadband": {
            "default": 0,
            "doc": "Position Deadband",
            "type": "float"
        },
        "serial": {
            "default": null,
            "doc": "Serial number for the particular device represented by the daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "tolerance": {
            "default": 20,
            "doc": "Tolerance in motor steps",
            "type": "int"
        },
        "units": {
            "default": "mm",
            "doc": "Units",
            "type": "string"
        },
        "update_rate": {
            "default": 0,
            "doc": "Update Rate",
            "type": "int"
        },
        "velocity": {
            "default": 11000,
            "dodoc": "Velocity of motion in steps/sec",
            "type": "float"
        },
        "velocity_gain": {
            "default": 0,
            "doc": "Velocity Gain",
            "type": "float"
        }
    },
    "doc": "Motor driver for motors from Precision MicroControl Corporation.\n",
    "installation": {
        "PyPI": "https://pypi.org/project/yaqd-pmc"
    },
    "links": {
        "bugtracker": "https://gitlab.com/yaq/yaqd-pmc/issues",
        "manufacturer": "https://pmccorp.com/products/api.php",
        "source": "https://gitlab.com/yaq/yaqd-pmc/"
    },
    "messages": {
        "busy": {
            "doc": "Returns true if daemon is currently busy.",
            "request": [],
            "response": "boolean"
        },
        "get_config": {
            "doc": "Full configuration for the individual daemon as defined in the TOML file.\nThis includes defaults and shared settings not directly specified in the daemon-specific TOML table.\n",
            "request": [],
            "response": "string"
        },
        "get_config_filepath": {
            "doc": "String representing the absolute filepath of the configuration file on the host machine.\n",
            "request": [],
            "response": "string"
        },
        "get_destination": {
            "doc": "Get current daemon destination.",
            "request": [],
            "response": "float"
        },
        "get_limits": {
            "doc": "Get daemon limits.Limits will be the <a href='https://en.wikipedia.org/wiki/Intersection_(set_theory)'>intersection</a> of config limits and driver limits (when appliciable).",
            "request": [],
            "response": {
                "items": "float",
                "type": "array"
            }
        },
        "get_position": {
            "doc": "Get current daemon position.",
            "request": [],
            "response": "float"
        },
        "get_state": {
            "doc": "Get version of the running daemon",
            "request": [],
            "response": "string"
        },
        "get_units": {
            "doc": "Get units of daemon. These units apply to the position and destination fields.",
            "request": [],
            "response": [
                "null",
                "string"
            ]
        },
        "home": {
            "doc": "Initiates the homing procedure.\nThe daemon will report as busy during the homing procedure.\n After the homing procedure is complete, the daemon will return to the current destination.\n",
            "request": [],
            "response": "null"
        },
        "id": {
            "doc": "JSON object with information to identify the daemon, including name, kind, make, model, serial.\n",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "in_limits": {
            "doc": "Check if a given position is within daemon limits.",
            "request": [
                {
                    "name": "position",
                    "type": "float"
                }
            ],
            "response": "boolean"
        },
        "mm_to_steps": {
            "doc": "Convert mm travel to motor steps",
            "request": [
                {
                    "doc": "mm of travel",
                    "name": "mm",
                    "type": "float"
                }
            ],
            "response": "int"
        },
        "reset_to_known_postion": {
            "doc": "Reset the represented position to a known actual position",
            "request": [
                {
                    "doc": "Current actual position in mm",
                    "name": "position",
                    "type": "float"
                }
            ],
            "response": "null"
        },
        "set_position": {
            "doc": "Give the daemon a new destination, and begin motion towards that destination.",
            "request": [
                {
                    "name": "position",
                    "type": "float"
                }
            ],
            "response": "null"
        },
        "set_relative": {
            "doc": "Give the daemon a new destination relative to its current position. Daemon will immediately begin motion towards new destination. Returns new destination.",
            "request": [
                {
                    "name": "distance",
                    "type": "float"
                }
            ],
            "response": "float"
        },
        "shutdown": {
            "doc": "Cleanly shutdown (or restart) daemon.",
            "request": [
                {
                    "default": false,
                    "name": "restart",
                    "type": "boolean"
                }
            ],
            "response": "null"
        },
        "steps_to_mm": {
            "doc": "Convert motor steps to mm travel",
            "request": [
                {
                    "doc": "Number of motor steps",
                    "name": "steps",
                    "type": "int"
                }
            ],
            "response": "float"
        },
        "stop": {
            "doc": "Halt motion of the motor",
            "request": [],
            "response": "null"
        }
    },
    "name": "is-homeable",
    "protcol": "has-position",
    "protocol": "pmc",
    "requires": [],
    "state": {
        "destination": {
            "default": NaN,
            "type": "float"
        },
        "hw_limits": {
            "default": [
                0,
                50
            ],
            "items": "float",
            "type": "array"
        },
        "position": {
            "default": NaN,
            "type": "float"
        }
    },
    "traits": [
        "is-homeable",
        "has-limits",
        "has-position",
        "is-daemon"
    ]
}
